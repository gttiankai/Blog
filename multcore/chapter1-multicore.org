多核并行计算
* 多核计算比较重要的问题是
** 互斥问题

** 死锁问题

** 饥饿问题
当Alice和Bob的请求发生冲突的时候，总会是Bob的请求延迟，Bob的请求可能一致得不到满足。

** 等待
* lock
** abortable locks 可撤销的锁
** queue lock
*** 缺点
队列锁存在的问题；当队列锁中一个链断裂的时候，就会使后边的进程无法获得锁，这就是队列锁存在的问题
所以当一个队列锁的退出的时候，必须改变链表的结构，使后边的锁能够得到重新链接到queue lock。所以这时候就需要abortable lock

在锁的结构中添加一个节点 reference，它由三种状态，这三种状态是什么？
这三种状态是；
1 NULL ： 表示 锁没有实现，或者已经推出了（abort）
2 available(这个是唯一的)， 表示 lock is free
3 
* Concurrent Object（并发对象）
** 怎么实现并发对象
多个进程，当对一个链表进行操作的时候，最简单的做法，一访问就就锁，操作结束之后释放锁，虽然实现起来非常的简单，当时效率比较低。所以我们的就是使用新的方式。

当两个进程操作链表的时候，一个操作链表的head，一个操作链表的tail。在两个进程在操作的时候，在不加锁的情况下是可以并发的执行的。不会产生产生错误。
** 怎么保证实现的是正确的
保证合法的顺序执行，注意我们使用的是队列，所以我们要注意，并发队列的
** read write
read(0),是读取的“0”
read(1),是读取的“1”
* Book : The art of multiprocessor programming
** chapter 2
*** 书写java的结构
一个比较好的书写java中的锁的结构化的方法，如下所示
#+BEGIN_SRC java
mutex.lock()
try {
    ...      // body
} finally {
    mutes.unlock();
}
#+END_SRC
这种办法可以保证进入try程序块以前获得锁，在离开程序块时候释放锁，即使在程序块中的某些语句抛出异常。
*** LockOne
实现：
#+BEGIN_SRC java
// LockOne

class LockOne implements Lock{
    private boolean[] flag = new boolean[2];
        // thread-local index , 0 or 1
    public void lock(){
        int i = ThreadID.get();
        int j = 1 - i;
        flag[i] = true;
        while(flag[j])
          ;
    }
    public void unlock()
    {
        int i = ThreadID.get();
        flag[i] = false;
    }
}
#+END_SRC
缺陷：两个进程交叉执行的时候，会发生死锁，
*** LockTwo
缺陷：当一个进程完全先于另一个进程的时候就会出现死锁
*** Peterson lock
实现
#+BEGIN_SRC java
// peterson lock

    class Peterson implements lock {
        private volatile boolean[] falg = new boolean[2];
        private volatile int victim;
        public void lock(){
            int i = ThreadID.get();
            int j = 1 - i;
            flag[i] = true;
            victim = i;
            while (flag[j] && victim == i)
                {};
        }
        public void unlock(){
            int i = ThreadID.get();
            flag[i] = false;
        }
    }
#+END_SRC
结合了lockOne 和 LockTwo lock的优点,Peterson Lock是无饥饿，并且是死锁的。
*note* :上面的锁都只能支持两个进程间的同步。
*** 过滤锁

* 考试
** 题型
- 选择题（15题 30分）
- 简答证明题 （7 题 50分）
- 编程题目 （fork-join framework, 使用锁和条件对象实现具体的共享访问协议，7或者8）
** 复习大纲
*** 介绍并行和并发
**** Java Multi-thread programming
- start()
每个线程都需要调用这个线程来开启线程
- join() 
**** 并行和并发的不同点
- 不同

并行（parallelism）：使用额外的资源使问题解决的更快。
并发（concurrency）：正确并且高效的管理访问共享资源

- 相同
1. 都被用户线程所使用
2. 如果并行的资源需要访问共享资源,那么并发就会被管理起来

**** Calculate the amount of Primer Number in section [1, 10^7]  

*** 并行编程
算法和分析
**** Sum array 
- start 这个地方一定要注意，一定要注意启动每个子进程都需要，将使用start
- join 
- fork-join framwork Dag
下面就是非常出名的 fork-join framwork (***)
#+BEGIN_SRC java
class SumArray extends RecursiveTask<Integer>{
    int lo;
    int hi;
    int[] arr;
    SumArray(int a , int l, int h)
        {} // construct
    protected Integer computer(){
        if(hi - lo < SEQUENTIAL_CUTOFF){
            int ans;
            for (int i = lo; i < hi; i++) {
                ans += arr[i]
            }
            return ans;
        }else{
            SumArray left = new SumArray(arr, lo, (hi + lo)/2);
            SumArray right = new SumArray(arr,(hi+lo)/2, hi );
            left.fork;
            int rightAns = right.computer();
            int leftAns = left.join();
            return leftAns + rightAns;
        }
    }
    static final ForkJoinPool fjPool = new ForkJoinPool();

    int sum(int[] arr){
        return fjPool.invoke(new SumArray(arr,0,arr.length));
    }
}
#+END_SRC
- Divid and Conquer 分治法
使用分治法来对上面的问题进行改进。
**** 算法
- Prefix-sum 
- Filter
- Parallel Sorting

**** Work span and Parallelism


**** Divid and Conquer 解决某些实际问题的编程
*** 并发编程
**** 互斥线程访问共享资源
正确性和有效性


**** 如何来描述并发进程的正确性
- 互斥访问
- 可线性化
- 无死锁
- 无饿死
- lock-free？
- 无等待
**** 互斥(Mutual Exelusion)
***** 互斥的形式化定义

***** 证明可以互斥

***** 拥有读写指令的强制互斥的约束

***** CAS 和 GetAndSet
**** 可线性化

***** 静态一致性，顺序一致性和可线性化特征区别（自己添加的，不是考试内容）
- 静态一致性：适用于以*相对较弱*的对象行为约束代价获得高性能的应用，
- 顺序一致性：是一种较强的约束限制，通常用于表述类似于硬件存储器接口这样的的底层系统。
- 可线性化特征：是一种更强的约束，适用于描述由可线性化组件构成的高层系统。

***** 一些符号的意义

q.enq(x): 表示线程使元素在对象q中入队。q.deq(x)表示线程使x从对象q中出队。

***** 静态一致性
原则：3.3.1 方法调用应呈现出以某种顺序次序执行且每个时刻只有一个调用发生
原则：3.3.2 由一系列静止状态分隔开的方法调用应呈现出与按照他们的实时调用次序相同的执行的效果。
***** 我们为什么需要可线性化

***** 什么是可线性化

***** 怎么决定一个可线性化的执行历史

***** 什么是顺序一致性
原则3.4.1：方法调用应该呈现出按照程序次序调用的执行效果。

顺序一致性：要求方法调用的执行行为具有按照某种顺序次序的执行效果，并且这种顺序
***** SC 和 Lin的区别和不同

***** 什么是线性化点
**** Spin lock
***** 理想化的锁的实现是低效的

***** 什么是自旋（spin）

***** 自旋锁的实现依赖于底层的结构

***** 本地自旋对cache hit 是非常有帮助的

***** TAS，TTAS, TTAS-backoff，CLH,MCS
1.CLH 队列锁的实现 ，
 CLH队列中的结点QNode中含有一个locked字段，该字段若为true表示该线程需要获取锁，且不释放锁，为false表示线程释放了锁。结点之间是通过隐形的链表相连，之所以叫隐形的链表是因为这些结点之间没有明显的next指针，而是通过myPred所指向的结点的变化情况来影响myNode的行为。CLHLock上还有一个尾指针，始终指向队列的最后一个结点。CLHLock的类图如下所示：
具体的情况可以点击下面的连接 [[http://blog.csdn.net/aesop_wubo/article/details/7533186][here]]
2. MCS 锁的实现
[[http://blog.csdn.net/aesop_wubo/article/details/7538934][java 并发编程学习笔记之MCS队列锁]]
**** Monitors
***** spin wait and blocking

***** condition
- await(),signal, signalAll()

***** Re-check is necessary after being waken
- while(B){x.await()}

***** To avoid lost-wake-up

***** 监听器的编程
**** 并发数据结构
***** 链表
- Coarse-grained  Synchronization（粗粒度的同步）
- Fine-grained Synchronization （细粒度的同步）
- 乐观（optimistic）
- Lazy
- Lock-free
**** Hand-over-hand locking
**** 事物型内存？

** my question
*** 活性和安全性
- 安全性：说明了“不好的事情”绝不会发生。
- 活性：指的是特定的“好的事情”一定会发生。

*** 无饥饿和无死锁的定义

*** 几种锁的实现 MCS 和 CLH 

*** t.void ：就是使动作生效。

*** ABA 问题
compareAndSet(old-value, new-value)操作,判断 old-value是否有效，如果有效进行替换。
*** 粗粒度锁和细粒度锁

*** ABA 问题 linked-list 或者tm ppt

*** 加速比的公式

*** volatile(挥发)
volatile域是可线性的，对一个volatile域的读就如同获得一个锁：工作区被置为无效，重新从存储器中读取该挥发域的当前值。对一个volatile域的写类似于释放一个锁：挥发域的值立即被写回到寄存器。

*** compareAndSet
意思是指在set之前先比较该值有没有变化，只有在没变的情况下才对其赋值

*** 乐观锁与悲观锁
- 悲观锁：假定会发生并发冲突。所以要尽可能的锁住。
- 乐观锁：假定不会发生并发冲突，只会在真正提交的时候，才会加锁，
